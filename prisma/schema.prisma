// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TargetUser {
  ALL
  BETA
  INTERNAL
  PREMIUM
}

enum Environment {
  PRODUCTION
  DEVELOPMENT
  STAGING
}

model FeatureFlags {
  id                 String               @id @default(uuid())
  clerk_user_id      String
  name               String
  slug               String               @unique
  description        String
  enabled            Boolean              @default(false)
  rollout_percentage Int                  @default(0)
  targeting          TargetUser[]         @default([ALL])
  environment        Environment          @default(DEVELOPMENT)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  recent_activities  RecentActivity[]
  evaluationLogs     FlagEvaluationLogs[]
  ai_summary         AISum?
}

model RecentActivity {
  id            String       @id @default(uuid())
  clerk_user_id String
  flag          FeatureFlags @relation(fields: [flag_id], references: [id], onDelete: Cascade)
  flag_id       String
  activity      String
  createdAt     DateTime     @default(now())
}

model APIKey {
  id            String    @id @default(uuid())
  clerk_user_id String
  name          String
  prefix        String
  key           String    @unique
  revoked       Boolean   @default(false)
  lastUsed      DateTime?
  createdAt     DateTime  @default(now())
}

model FlagEnviroment {
  id            String   @id @default(uuid())
  clerk_user_id String   @unique
  prod          String?
  dev           String?
  stage         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())
}

model FlagEvaluationLogs {
  id              String       @id @default(uuid())
  clerk_user_id   String
  flag            FeatureFlags @relation(fields: [flag_id], references: [id])
  flag_id         String
  enabled         Boolean
  visited_user_id String?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
}

model AISum {
  id             String       @id @default(uuid())
  flag           FeatureFlags @relation(fields: [flag_id], references: [id])
  flag_id        String       @unique
  hash           String
  summary        String       @default("")
  recommendation String       @default("")
}
